'use strict';/* eslint-env node *//* eslint
  comma-dangle: off,
  semi: off */function _asyncToGenerator(fn){return function(){var gen=fn.apply(this,arguments);return new Promise(function(resolve,reject){function step(key,arg){try{var info=gen[key](arg);var value=info.value}catch(error){reject(error);return}if(info.done){resolve(value)}else{return Promise.resolve(value).then(function(value){step('next',value)},function(err){step('throw',err)})}}return step('next')})}}const hmac=require('../hmac');var _require=require('../utils');const fromHex=_require.fromHex,makeRandomGen=_require.makeRandomGen,option=_require.option,splitInPieces=_require.splitInPieces;const generate=(()=>{var _ref=_asyncToGenerator(function*(options){let secret=options.secret,payload=options.payload,minimum=options.minimum,maximum=options.maximum,amount=options.amount,distinct=options.distinct;minimum=option(minimum,1);maximum=option(maximum,60);amount=option(amount,6);distinct=option(distinct,true);if(distinct&&amount>=maximum-minimum){throw Error('The number of balls [amount] must be lower than the [maximum - minimum] number of RNG when [distinct] flag is on!')}const seed=yield hmac.sign(secret,payload);const parts=yield splitInPieces(seed,amount);const randomGen=makeRandomGen(minimum,maximum);const additional=randomGen(fromHex(parts.rest));parts.pieces=parts.pieces.map(fromHex).map(Math.abs).map(randomGen).map(function(number){return number+additional}).map(randomGen);if(distinct){const result=[];const cache={};parts.pieces.forEach(function(value){let number=value;// deduplicate
while(cache[number.toString()]){number=randomGen(number*additional)}cache[number.toString()]=true;result.push(number)});return result}else{return parts.pieces}});return function generate(_x){return _ref.apply(this,arguments)}})();module.exports.generate=generate;